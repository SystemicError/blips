+Finish animation image placeholders.
+Do the same for sounds.
+Write keys, campaign file.
+Start coding?
+Finish media_set definitions.
+Finish campaign definition.
+Write world_tile
+Fix the whitespace problem!  fscanf(fp,"%s\n",buffer); stops at the first whitespace!  Replace with fgets.
+Make a new class called "string_map."  This will be a map in the data structure sense, to associate a string with a void pointer.  Use this to encapsulate all the damn keys hanging around.
+Rewrite statics support:
	Could add int static field to creatures.  Objects of type static would appear in normal key, would need separate definitons.  I like this solution because it doesn't introduce yet another map, and it's not a huge hassle to have static objects occasionally be copies of non-static ones.
	+Also, new keyword.  Call it enum spawn_trigger {enter, clear} and bool respawn.
	+Rewrite *_type.* files to accommodate these new fields.
+Figure out how we're going to deal with object keys.  Will world tiles just read the map strings, letting the game translate?  Seems reasonable, actually.
+Get working on loading pr_types and ai_types in blips_game.
	+pr_types
	+ai_types
+Insert code for player creatures.
	+give player creatures a special array in blips_game.
	+Add code to remove special array in destructor, create it in constructor.
+Get rendering of objects working.
	+Br
	+Co
	+Cr
	+Pr needs general testing.
+Convert x_in_cell, y_in_cell to type double.
+Center creature, projectile images on their location.  This will solve the spawn offset problem with projectile rendering.
+Add boundary behaviour for projectiles, non-player creatures
+Figure out why aim defaults to right.  (Lack of deadzone, fixed.)
+Add code to decrement breakable time_remaining and remove zeroed ones.
+Center breakable rendering as with creatures, projectiles, since breaking animations need to be centered.
+Add stun timer to creatures.  This can absolutely be specified in creature stats file, since it has in-game reprecussions.  Also implement thos in-game reprecussions.
+Add barrier behaviour for projectiles, creatures
	+cr
	+pr
+GUI needs to keep track of animation index for EACH instance of an object, otherwise they cycle one another's animations.
	+Give each of br/co/cr/pr its own "animation timer" fields for each of the different animations.  Have them initialize to zero.  This will be our ONE EXCEPTION to the gui/game separation rule.
	+Charge bgui with changing these timers as necessary.
	+Change all instances of sprite_animation_cycle() in bgui to references to the appropriate frame.
+Find out why the creature inside the barrier box is disappearing.  (Lack of initialization.)
+Fix the "diagonal problem" with barriers and breakables.
	+barriers
	+breakables
+Figure out why AI occasionally runs from creature rather than projectile.  (DODGE was calculating with wrong vector).
+Figure out segfault?  Maze out-of-bounds problem!  Thanks, gdb!
+Projectiles and creatures see a barrier at the edge of the world tile because the maze structure always returns one at the edge.  Fix?  Somehow?   We have the next world tile over available!  Use it to determine what can exit!
	+No, simpler than that.  Just remove code that has maze always return edge as barrier.  But have to replace with call that keeps track of nearest edge is a barrier.







+Write breakable,collectible,creature,projectile
-Integrate these into game, gui.
	+Give game a function called spawn() or something, which causes current world tile's list of objects to be entered into present br/co/cr lists.
	+Give game a function called despawn() or something, which removes all non-player objects in preparation for spawn().
	-Have both spawn() and despawn() called by change_tile(maze_direction).
	-Have change_tile(maze_direction) triggered by [bool] player_leaving_tile().


-Map out ai structure.  Does a type called ai ever get instantiated beyond ai_type?  Seems necessary for patrol_ns/ew, wander.

-Test maze/barrier loading. (print it!)

-Consider a blips_input_reader which is configured by a text file.

-Answer this:  if animations are separate from function, how do we decide how long to allow them to persist in the game before deletion?  Give blips_game function ptrs projectile_released(), creature_released(), and breakable_released().  The gui will implement them and decide when to let go of them (when animations are done).

-Collision control.  Also done with fptrs.

-Write blips_game_apply_ai_type_to_creature()
	-move_goal
	-aim_goal
	-fire_goal

-Add sound playback.

-Add a second world tile to test spawn/despawn/change_tile().

-Consider having creature team specified in creature_type file, not defaulted to player/non-player.

-Add code to check for collectible/player collisions

-Add status bar code.

-Add death animation separate from stun animation to creatures.

-Decide how to react to player death.

-Decide how to trigger world tile change when two or more players present.
	-Check at END of game_step() that all players are on the same side, facing the side (+/- some tolerance), and firing
	-Call change_tile(), which calls despawn/spawn.

-For now, give control scheme as 1st player, 1st joystick, 2nd joystick, 2nd player
